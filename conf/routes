## Routes
## This file defines all application routes (Higher priority routes first)
## ~~~~
#
GET           /swagger.json                                        controllers.ApiHelpController.getResources

GET           /swagger                                             controllers.Application.swagger
GET           /gecoQueries                                         controllers.gmql.GecoQueries.gecoQueries

GET           /gecoQueriesJson                                     controllers.gmql.GecoQueries.gecoQueriesJson(q_type:String = "default")

GET           /gecoQueriesJson/:q_type                             controllers.gmql.GecoQueries.gecoQueriesJson(q_type:String)

#
#
#
#
### Home page
GET           /                                                    controllers.Application.gmql
## GMQL REST help page
GET           /help                                                controllers.Application.gmqlRestHelp
## GMQL help/documantation page
GET           /gmqlHelp                                            controllers.Application.gmqlHelp
## Admin Page
GET           /admin                                               controllers.Application.adminPage
#
#
## java script reverse router, all the javascript ajax call url load from the file below
## documentation: https://www.playframework.com/documentation/2.4.x/ScalaJavascriptRouting#router-resource
GET           /javascriptRoutes                                    controllers.JavascriptRoute.javascriptRoutes
#
#
## Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                        controllers.Assets.at(path="/public", file)
## Map web jar resources from the /public folder to the /assets URL path
GET           /webjars/*file                                       controllers.WebJarAssets.at(file)
#
#
## USER RELATED ROUTES
## get authanticated user information(
GET           /user                                                controllers.SecurityController.getUser
GET           /guest                                               controllers.SecurityController.loginGuest
GET           /logout                                              controllers.SecurityController.logout
POST          /login                                               controllers.SecurityController.login
POST          /register                                            controllers.SecurityController.registerUser
GET           /recovery/:username                                  controllers.SecurityController.passwordRecoveryEmail(username)
GET           /recovery                                            controllers.SecurityController.passwordRecovery
POST          /password                                            controllers.SecurityController.updatePassword

GET           /getMemoryUsage                                      controllers.gmql.DSManager.getMemoryUsage



#
#
#
##multipart
#
##dataSet
GET           /datasets                                            controllers.gmql.DSManager.getDatasets
##returns the samples of the dataset
GET           /datasets/:datasetName                               controllers.gmql.DSManager.getSamples(datasetName)
##delete dataset
DELETE        /datasets/:datasetName                               controllers.gmql.DSManager.deleteDataset(datasetName)
##this could be alternative
##GET           /datasets/:datasetName/delete                                     controllers.gmql.DSManager.deleteDataset(datasetName)

GET           /datasets/:datasetName/rename/:newDatasetName        controllers.gmql.DSManager.renameDataset(datasetName, newDatasetName)
PATCH         /datasets/:datasetName                               controllers.gmql.DSManager.modifyDataset(datasetName)

#
## get single sample file, region or meta
#GET           /datasets/:datasetName/:sampleName/:isMeta          controllers.gmql.DSManager.getFile(datasetName, sampleName, isMeta)
GET           /datasets/:datasetName/:sampleName/region            controllers.gmql.DSManager.getRegionStream(datasetName, sampleName)
GET           /datasets/:datasetName/:sampleName/metadata          controllers.gmql.DSManager.getMetadataStream(datasetName, sampleName)

GET           /datasets/:datasetName/:sampleName/info              controllers.gmql.DSManager.getSampleInfo(datasetName, sampleName)


GET           /datasets/:datasetName/zip                           controllers.gmql.DSManager.zip(datasetName:String)


GET           /datasets/:datasetName/getUCSCList/:position                   controllers.gmql.DSManager.getUcscList(datasetName:String, position: String)
#GET           /datasets/:datasetName/getSampleFile/:sample        controllers.gmql.DSManager.getRegionStream(datasetName:String, sample:String)
GET           /datasets/:datasetName/getUCSCLink/:position                   controllers.gmql.DSManager.getUcscLink(datasetName:String, position: String)

GET           /datasets/:datasetName/schema                        controllers.gmql.DSManager.dataSetSchema(datasetName)
# get generation query of dataset
GET           /datasets/:datasetName/query                         controllers.gmql.DSManager.getQueryStream(datasetName)
GET           /datasets/:datasetName/vocabulary                    controllers.gmql.DSManager.getVocabularyStream(datasetName)

GET           /datasets/:datasetName/info                          controllers.gmql.DSManager.getDatasetInfo(datasetName)



#    val schemaNameOption = request.getQueryString("schemaName")
POST          /datasets/:datasetName/uploadSample                  controllers.gmql.DSManager.uploadSample(datasetName: String)
#    val schemaNameOption = request.getQueryString("schemaName")
POST          /datasets/:datasetName/uploadSampleUrls              controllers.gmql.DSManager.uploadSamplesFromUrls(datasetName: String)
#TODO change can be problem with upper one
GET           /datasets/:datasetName/:columnName/parse             controllers.gmql.DSManager.parseFiles(datasetName:String, columnName: String)




GET           /metadata/:datasetName/sample/:sampleName            controllers.gmql.MetadataBrowser.getSampleMetadata(datasetName, sampleName)

#GET           /metadata/:datasetName/wholeSample            controllers.gmql.MetadataBrowser.getSampleMetadata(datasetName, datasetName)


GET           /metadata/:datasetName/all                           controllers.gmql.MetadataBrowser.getKeys(datasetName)
POST          /metadata/:datasetName/filter                        controllers.gmql.MetadataBrowser.getFilteredKeys(datasetName)

GET           /metadata/:datasetName/all/:key                      controllers.gmql.MetadataBrowser.getValues(datasetName,key)
POST          /metadata/:datasetName/filter/:key                   controllers.gmql.MetadataBrowser.getFilteredValues(datasetName,key)

POST          /metadata/:datasetName/dataset/filter                controllers.gmql.MetadataBrowser.getFilteredDataset(datasetName)


POST          /metadata/:datasetName/dataset/matrix                controllers.gmql.MetadataBrowser.getFilteredMaxtrix(datasetName)


#
# OLDER IMPLEMENTATION
## TODO REMOVE these will be changed into direct download, clean part will be remove
#GET           /datasets/:datasetName/preparaZip/:clean                         controllers.gmql.DSManager.zipFilePreparation(datasetName, clean)
#GET           /datasets/:datasetName/downloadZip                               controllers.gmql.DSManager.downloadFileZip(datasetName:String)
#

#

#
## search metadata
#POST          /dataSets/:datasetName/samples/meta                              controllers.gmql.RepositoryBro.getFilteredSamples(datasetName)
#POST          /dataSets/:datasetName/samples/meta                              controllers.gmql.RepositoryBro.getFilteredSamples(datasetName)
#
#
##Query
POST          /queries/run/:fileName/:gtfOutput                    controllers.gmql.QueryMan.runQuery(fileName: String, gtfOutput: String)
POST          /queries/compile                                     controllers.gmql.QueryMan.compileQuery

POST           /queries/dag/:gtfOutput                  controllers.gmql.QueryMan.runDag(gtfOutput: String, federatedJobId: String ?= "")
#POST           /queries/dag/:gtfOutput/:jobId                  controllers.gmql.QueryMan.runDag(gtfOutput: String, jobId:Option[String])


#GET           /queries/read/:fileKey                                           controllers.gmql.QueryMan.readQuery(fileKey:String)
#GET           /queries/delete/:fileKey                                         controllers.gmql.QueryMan.deleteQuery(fileKey:String)
#POST          /queries/save/:fileName/:fileKey                                 controllers.gmql.QueryMan.saveQueryAs(fileName: String, fileKey: String)
#GET           /queries/runv2/:fileKey/:gtfOutput/:execType                     controllers.gmql.QueryMan.runQueryV2File(fileKey: String, gtfOutput: String, execType: String)
#GET           /queries/compilev2/:fileKey/:execType                            controllers.gmql.QueryMan.compileQueryV2File(fileKey: String, execType: String)
#
##Jobs
GET           /jobs                                                controllers.gmql.QueryMan.getJobs
GET           /jobs/:id/trace                                      controllers.gmql.QueryMan.traceJob(id: String)
GET           /jobs/:id/log                                        controllers.gmql.QueryMan.getLog(id: String)
GET           /jobs/:id/stop                                       controllers.gmql.QueryMan.stopJob(id: String)
#
#
###COMPILE





#
#
#GET           /metadata/browseResourceFile/:fileKey                            controllers.gmql.MetadataBrowser.browseResourceFile(fileKey:String)
#GET           /metadata/browseAttribute/:fileKey/:attribute                    controllers.gmql.MetadataBrowser.browseAttribute(fileKey:String, attribute:String )
#GET           /metadata/browseAttributeValue/:fileKey/:attribute/:value        controllers.gmql.MetadataBrowser.browseAttributeValue(fileKey:String, attribute:String, value:String)
#GET           /metadata/browseId/:fileKey/:id                                  controllers.gmql.MetadataBrowser.browseId(fileKey:String, id:String)
#GET           /metadata/getAllExperiments/:fileKey/:attribute/:value           controllers.gmql.MetadataBrowser.getAllExperiments(fileKey:String, attribute:String, value:String)
##?? GET /metadata/XX is it necessery filterExperiments
#
#
#
#
#
#GET           /repo/browse/meta                                                controllers.gmql.RepositoryBro.browseRepositoryMetadata
#GET           /repo/browse/meta-json                                           controllers.gmql.RepositoryBro.browseRepositoryMetadataJson
#GET           /repo/browse/schema                                              controllers.gmql.RepositoryBro.browseRepositorySchemas
#GET           /repo/browse/query                                               controllers.gmql.RepositoryBro.browseRepositoryQueries
#GET           /repo/browse/all                                                 controllers.gmql.RepositoryBro.browseRepositoryAll
#
#
##NEW
#GET           /dataSet/:datasetName/schema                                     controllers.gmql.RepositoryBro.dataSetSchema(datasetName)
#GET           /dataSet/:datasetName/meta                                       controllers.gmql.RepositoryBro.dataSetAttributeList(datasetName)
#GET           /dataSet/:datasetName/meta/:attributeName                        controllers.gmql.RepositoryBro.dataSetMetaAttribute(datasetName, attributeName)
#GET           /dataSet/:datasetName/meta/:attributeName/:attributeValue        controllers.gmql.RepositoryBro.dataSetMetaAttributeValue(datasetName, attributeName, attributeValue)
#GET           /dataSet/:datasetName/sample/meta/:id                            controllers.gmql.RepositoryBro.browseId(datasetName, id)
#
#
#
GET           /query                                               controllers.gmql.QueryBrowser.getQueries
GET           /query/:queryName                                    controllers.gmql.QueryBrowser.getQuery(queryName)
POST          /query/:queryName/save                               controllers.gmql.QueryBrowser.saveQuery(queryName)
DELETE        /query/:queryName                                    controllers.gmql.QueryBrowser.deleteQuery(queryName)

#
#
##GET         /repo/download/:fileKey                                          controllers.gmql.RepositoryDown.downloadFile(fileKey)
##GET         /repo/download/zip                                               controllers.gmql.RepositoryDown.downloadFileZip(filename: Option[String], fileKeys: Option[List[String]])
#
#
## VIEW CREATION
## to create metadata result page, this will be obsolete
GET           /metadata/:totalCount/:list                          controllers.Application.sampleMetadata(totalCount:Int, list)
#
## TEST PAGES
## heatmap test page
#GET           /heatMapTest                                                     controllers.Application.heatMapTest
#
#GET           /zip                                                             controllers.Application.zip
#
#
#GET           /dataSets/:dataSetName/downloadZip2                              controllers.gmql.DSManager.downloadFileZip2(dataSetName:String)


#GET           /test                                              controllers.Application.test

# ADMIN
# returns the list of users with their information
GET         /users                                                  controllers.gmql.AdminManager.getUsers
GET         /users/types                                            controllers.gmql.AdminManager.getUserTypes
PUT         /users/:username/type                                   controllers.gmql.AdminManager.updateType(username)

# FEDERATED
GET         /federated/download/:fedJobId/:dsName                   controllers.gmql.GFManager.zip(fedJobId, dsName)
GET         /federated/import/:fedJobId/:dsName/:locationId         controllers.gmql.GFManager.importResult(fedJobId, dsName, locationId)
GET         /federated/checkimport/:fedJobId/:dsName                controllers.gmql.GFManager.checkImportStatus(fedJobId, dsName)
GET         /federated/delete/:fedJobId/:dsName                     controllers.gmql.GFManager.delete(fedJobId, dsName)